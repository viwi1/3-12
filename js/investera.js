import { getState, updateState, onStateChange } from "./state.js";
import { formatNumber } from "./main.js";

// ğŸ”¹ HÃ¤mta lagrat 3:12-belopp
let belopp312 = getState("belopp312") || 221650;

/**
 * BerÃ¤knar investeringsutdelning och uppdaterar UI + state
 */
function berÃ¤knaInvestering() {
    const investeratBeloppEl = document.getElementById("investeratBelopp");
    const avkastningEl = document.getElementById("avkastning");
    const avkastningValueEl = document.getElementById("avkastningValue");
    const totaltNettoEl = document.getElementById("totaltNetto");

    if (!investeratBeloppEl || !avkastningEl) return;

    // ğŸ”¹ HÃ¤mta exitVÃ¤rde i realtid frÃ¥n state
    const investeratBelopp = getState("exitVarde") || 0;

    // ğŸ”¹ HÃ¤mta och visa avkastningens procentvÃ¤rde
    const avkastningProcent = parseInt(avkastningEl.value, 10);
    avkastningValueEl.textContent = avkastningProcent + "%";

    // ğŸ”¹ BerÃ¤kna avkastningen
    const avkastning = avkastningProcent / 100;
    const totalAvkastning = investeratBelopp * avkastning;

    // ğŸ”¹ HÃ¤mta skattesatser och rÃ¤kna ut fÃ¶rdelning lÃ¥g/hÃ¶g beskattning
    const skattLÃ¥g = getState("skattUtdelningLÃ¥g");
    const skattHÃ¶g = getState("skattUtdelningHÃ¶g");

    const bruttoLÃ¥g = Math.min(totalAvkastning, belopp312);
    const bruttoHÃ¶g = totalAvkastning > belopp312 ? totalAvkastning - belopp312 : 0;
    const nettoLÃ¥g = bruttoLÃ¥g * (1 - skattLÃ¥g);
    const nettoHÃ¶g = bruttoHÃ¶g * (1 - skattHÃ¶g);

    // ğŸ”¹ Totalt netto (efter skatt)
    const totaltNetto = nettoLÃ¥g + nettoHÃ¶g;

    // ğŸ”¹ Uppdatera UI
    investeratBeloppEl.textContent = formatNumber(investeratBelopp);
    totaltNettoEl.textContent = formatNumber(totaltNetto);

    // ğŸ”¥ Uppdatera state (sÃ¥ att utgifter.js fÃ¥r rÃ¤tt inkomstvÃ¤rde)
    console.log("ğŸš€ [Debug] Uppdaterar state med nytt totaltNetto:", totaltNetto);
    updateState("totaltNetto", totaltNetto);
}

// ğŸ”¹ Lyssna pÃ¥ fÃ¶rÃ¤ndringar i exitVarde och uppdatera UI
onStateChange("exitVarde", (nyttExitVarde) => {
    console.log("ğŸ”„ [Debug] `exitVarde` har uppdaterats:", nyttExitVarde);
    berÃ¤knaInvestering(); // ğŸ”¥ KÃ¶r om berÃ¤kningen nÃ¤r vÃ¤rdet Ã¤ndras
});

/**
 * Vid sidladdning, bygg investerings-ui och koppla event-lyssnare
 */
document.addEventListener("DOMContentLoaded", () => {
    const resultContainer = document.getElementById("resultInvestera");
    if (!resultContainer) return;

    // ğŸ”¹ Dynamiskt skapa HTML
    resultContainer.innerHTML = `
        <div class="box">
            <p class="result-title">Investera</p>
            <p><strong>Investerat belopp:</strong> <span id="investeratBelopp"></span></p>
            <div class="slider-container">
                <label for="avkastning">Avkastning (% per Ã¥r):</label>
                <input type="range" id="avkastning" min="1" max="30" step="1" value="10">
                <span class="slider-value" id="avkastningValue">10%</span>
            </div>
            <p><strong>Totalt netto utdelning:</strong> <span id="totaltNetto" style="color: green; font-weight: bold;"></span></p>
        </div>
    `;

    // ğŸ”¹ Koppla event-lyssnare
    document.getElementById("avkastning").addEventListener("input", berÃ¤knaInvestering);

    // ğŸ”¹ GÃ¶r en fÃ¶rsta berÃ¤kning
    berÃ¤knaInvestering();
});

// âœ… Exportera funktionen
export { berÃ¤knaInvestering };
