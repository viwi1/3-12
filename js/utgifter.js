import { formatNumber } from "./main.js";
import { getState, updateState, onStateChange } from "./state.js";

// üéØ Lista med utgifter
const UTGIFTER = [
    { namn: "BRF Avgift", belopp: 95580 },
    { namn: "Hemf√∂rs√§kring Dina f√∂rs√§kringar", belopp: 3420 },
    { namn: "Fritids och f√∂rskola", belopp: 28524 },
    { namn: "El vattenfall Eln√§t", belopp: 12726 },
    { namn: "El Tibber", belopp: 6252 },
    { namn: "Flexen", belopp: 196442 },
    { namn: "Klarna - presenter och skoj", belopp: 60000 },
    { namn: "Resa", belopp: 100000 },
    { namn: "L√•n och amortering", belopp: 115245 },
    { namn: "L√•n och amortering CSN", belopp: 8748 }
];

// üîπ H√§mta initial inkomst fr√•n state
let inkomst = getState("totaltNetto") || 0;

// üîπ K√∂r UI direkt vid sidladdning
document.addEventListener("DOMContentLoaded", () => {
    skapaUtgifterUI();
    uppdateraUtgifter(inkomst);
});

// üîπ Lyssna p√• f√∂r√§ndringar i `totaltNetto`, men undvik loopar
onStateChange("totaltNetto", (nyInkomst) => {
    if (Math.round(nyInkomst) !== Math.round(inkomst)) {
        uppdateraUtgifter(nyInkomst);
    }
});

/**
 * Skapar UI f√∂r utgifter (k√∂rs en g√•ng vid sidladdning)
 */
function skapaUtgifterUI() {
    const container = document.getElementById("expenses");
    if (!container) return;

    container.innerHTML = `
        <h3>Summeringar</h3>
        <p>Total inkomst: <span id="totalInkomst"></span></p>
        <p>Totala utgifter: <span id="totalUtgifter"></span></p>
        <p>Inkomst t√§ckning: <span id="inkomstT√§ckning"></span></p>
        <div id="utgifterForm"></div>
    `;

    const utgifterForm = document.getElementById("utgifterForm");

    // üîπ Skapa utgiftsposter
    UTGIFTER.forEach((utgift, index) => {
        const inputGroup = document.createElement("div");
        inputGroup.className = "input-group";
        inputGroup.innerHTML = `
            <label>${utgift.namn}:</label>
            <input type="number" id="kostnad${index}" value="${utgift.belopp}">
        `;
        utgifterForm.appendChild(inputGroup);

        // üîπ Eventlyssnare f√∂r att uppdatera totalbelopp n√§r utgifter √§ndras
        document.getElementById(`kostnad${index}`).addEventListener("input", () => {
            UTGIFTER[index].belopp = parseInt(document.getElementById(`kostnad${index}`).value, 10) || 0;
            uppdateraUtgifter(getState("totaltNetto"), true);
        });
    });
}

/**
 * Uppdaterar endast totalbelopp & procent, ingen on√∂dig state-uppdatering
 * @param {number} nyInkomst - V√§rdet p√• "totaltNetto"
 * @param {boolean} fr√•nUI - Om uppdateringen sker fr√•n UI (√§ndring av utgifter)
 */
function uppdateraUtgifter(nyInkomst, fr√•nUI = false) {
    if (!document.getElementById("totalInkomst")) return;

    const totalUtgifter = UTGIFTER.reduce((sum, u) => sum + u.belopp, 0);
    const t√§ckning = totalUtgifter > 0 ? (nyInkomst / totalUtgifter) * 100 : 0;

    document.getElementById("totalInkomst").textContent = formatNumber(nyInkomst);
    document.getElementById("totalUtgifter").textContent = formatNumber(totalUtgifter);
    document.getElementById("inkomstT√§ckning").textContent = Math.round(t√§ckning) + "%";

    // üîπ Undvik att uppdatera state om v√§rdet redan √§r detsamma
    if (!fr√•nUI && Math.round(getState("totaltNetto")) !== Math.round(nyInkomst)) {
        updateState("totaltNetto", nyInkomst);
    }
}

// ‚úÖ Exportera funktioner
export { skapaUtgifterUI, uppdateraUtgifter };
